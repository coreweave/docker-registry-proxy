{{- if .Values.regproxy.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: regproxy
  namespace: {{ $.Release.Namespace }}
  labels:
    k8s-app: regproxy
    kubernetes.io/name: "regproxy"
    kubernetes.io/cluster-service: "true"
spec:
  replicas: {{ default 10 .Values.regproxy.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      k8s-app: regproxy
  template:
    metadata:
      labels:
        k8s-app: regproxy
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      serviceAccountName: regproxy
      {{- if .Values.regproxy.topologySpreadConstraints }}
      topologySpreadConstraints:
      {{- toYaml .Values.regproxy.topologySpreadConstraints | nindent 8 }}
      {{- end }}
      {{- if .Values.regproxy.affinity }}
      affinity:
      {{- toYaml .Values.regproxy.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.regproxy.tolerations }}
      tolerations:
      {{- toYaml .Values.regproxy.tolerations | nindent 8 }}
      {{- end }}
      containers:
        - name: proxy
          image: {{ .Values.regproxy.image }}
          imagePullPolicy: IfNotPresent
          startupProbe:
            failureThreshold: 15
            httpGet:
              path: /
              port: 3128
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /
              port: 3128
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe: {{ .Values.regproxy.livenessProbe | toYaml | nindent 12 }}
          {{- if .Values.regproxy.env }}
          env:
          {{- toYaml .Values.regproxy.env | nindent 12 }}
          {{- end }}
          lifecycle:
            postStart:
              exec:
                command: ["/bin/bash", "-c", "/postStart.sh"]
          volumeMounts:
            - name: ca
              mountPath: /ca/ca.crt
              subPath: tls.crt
            - name: liveliness
              mountPath: /liveliness.sh
              subPath: liveliness.sh
            - name: poststart
              mountPath: /postStart.sh
              subPath: postStart.sh
            - name: ca
              mountPath: /ca/ca.key
              subPath: tls.key
            - name: cache
              mountPath: /docker_mirror_cache
            {{- if .Values.regproxy.slowCache }}
            - name: slow-cache
              mountPath: /slow_docker_mirror_cache
            {{- end }}
          {{- if .Values.regproxy.resources }}
          resources:
          {{- toYaml .Values.regproxy.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: registry
              protocol: TCP
              containerPort: 3128
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - NET_BIND_SERVICE
            readOnlyRootFilesystem: false
      imagePullSecrets:
        - name: docker-registry-cw-proxy
      volumes:
        - name: ca
          secret:
            secretName: regproxy-ca
        - name: liveliness
          configMap:
            name: regproxy-liveliness
        - configMap:
            defaultMode: 500 # This translates to r-x------; need to be able to execute, default value of 420 translates to r--r-----
            name: regproxy-poststart
          name: poststart
        - name: cache
          emptyDir:
            medium: Memory
            sizeLimit: {{ include "sizeLimit" . }}
        {{- if .Values.regproxy.slowCache }}
        - name: slow-cache
          emptyDir:
            medium: ""
            sizeLimit: {{ index .Values.regproxy.resources.limits "ephemeral-storage" }}
        {{- end }}
{{- end }}
